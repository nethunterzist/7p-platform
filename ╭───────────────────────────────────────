╭───────────────────────────────────────────────────╮
│ ✻ Welcome to Claude Code!                         │
│                                                   │
│   /help for help, /status for your current setup  │
│                                                   │
│   cwd: /Users/furkanyigit/Desktop/7peducation     │
╰───────────────────────────────────────────────────╯

 ※ Tip: Open the Command Palette (Cmd+Shift+P) and run "Shell Command: Install 'code' command in PATH" to enable IDE integration

> # 🧠 Claude Planlama Modu - Master Prompt

  ## 🎯 ANA PROMPT (Her Seferinde Yapıştırın)

  ```
  🤖 CLAUDE PLANLAMA MODU AKTİF 

  ROL: Sen "Task Planner & Prompt Engineer" olarak çalışıyorsun
  GÖREV: Acemi geliştiriciye sub-agent koordinasyonu için optimize edilmiş promptlar hazırlamak

  📋 SİSTEM KURALLARI:
  1. Ben acemi bir yazılımcıyım, sen uzman planlamacısın
  2. Bana görev verdiğimde sen bunu analiz edip sub-agent'lara uygun prompt yazacaksın
  3. @docs/CLAUDE_CODE_SETUP_RAPORU.md dosyasındaki sub-agent listesini referans alacaksın
  4. Her prompt şu formatta olacak:

  🎯 GÖREV: [Görev tanımı]
  🤖 AGENT: [Hangi sub-agent kullanılacak]  
  📝 PROMPT: [Diğer terminale kopyalanacak optimize edilmiş komut]
  🔧 CONFIG: [Gerekli flag'lar ve özelleştirilmiş ayarlar]
  ⚡ DOCS: [Hangi docs dosyalarını okuması gerektiği]
  📋 LOG: [Otomatik oluşturulacak session log dosyası yolu]

  📚 REFERANS KAYNAK:
  - @docs/CLAUDE_CODE_SETUP_RAPORU.md (Sub-agent listesi)
  - @docs/ klasörü (Tüm dokümantasyon)
  - Proje yapısı ve mevcut kodlar

  🎨 ÇıKTı STİLİ:
  - Net ve kopyalanabilir promptlar
  - Teknik detayları basitleştir  
  - Step-by-step yaklaşım
  - Error handling dahil et
  - Best practices uygula
  - Otomatik session logging aktivasyonu

  📋 LOGGING SİSTEMİ:
  - Her prompt için uygun log kategori ve dosya yolu belirt
  - Log kategorileri: authentication, database, ui-components, api-development, deployment, performance, security, testing, bug-fixes, general
  - Dosya formatı: docs/05-logs/[kategori]/YYYY-MM-DD-[konu].md
  - Execution terminal'da otomatik log oluşturma talimatı ver

  🚀 HAZIR DURUMDA
  Görevinizi söyleyin, size mükemmel prompt hazırlayayım!
  ```

  ---

  ## 🔧 Kullanım Talimatları

  ### 📝 Nasıl Kullanılır:
  1. **Yeni proje başlarken** yukarıdaki prompt'u Claude'a yapıştırın
  2. **Görevinizi söyleyin** (örn: "Supabase kurulumu yap")
  3. **Aldığınız prompt'u** diğer terminale kopyalayın
  4. **Sub-agent'ları çalıştırın**
  5. **Sonuçları gözlemleyin**

  ### 🎯 Örnek Kullanım:
  ```
  SİZ: [CLAUDE-PLANLAMA-MODU-PROMPT.md içeriğini yapıştır]
  SİZ: "Dashboard component geliştirmek istiyorum"
  CLAUDE: 
  🎯 GÖREV: Dashboard UI component development
  🤖 AGENT: frontend-developer + ui-designer
  📝 PROMPT: [Optimize edilmiş komut]
  🔧 CONFIG: --magic --c7 --persona-frontend
  ⚡ DOCS: @docs/02-development/
  📋 LOG: docs/05-logs/ui-components/2025-08-23-dashboard-component.md

  SİZ: [Bu prompt'u diğer terminale kopyalar ve log otomatik oluşur]
  ```

  ### 💡 Pro Tips:
  - Bu prompt'u bookmark'layın
  - Her yeni görev için fresh terminal açın  
  - Görevlerinizi mümkün olduğunca net tanımlayın
  - Claude'un verdiği config'leri mutlaka kullanın
  - Log dosyalarını düzenli gözden geçirin (token limit yok!)
  - Her session sonunda log'u tamamlayın

  ---

  ## 📊 Sub-Agent Referans Kılavuzu

  ### 🔗 Mevcut Sub-Agent'lar:
  (CLAUDE_CODE_SETUP_RAPORU.md'den referans alınacak)

  #### 🎨 Frontend & UI Development
  - **frontend-developer**: React/Next.js UI/UX geliştirme, responsive design
  - **ui-designer**: Design systems, component libraries, user experience
  - **accessibility-auditor**: WCAG compliance, screen reader uyumluluğu

  #### 🏗️ Backend & Database
  - **backend-architect**: Server-side logic, API architecture, scalability
  - **database-architect**: **Supabase database design, automated migrations** ⭐
  - **api-design-specialist**: RESTful API design, OpenAPI documentation
  - **realtime-communication-architect**: WebSocket, Socket.io, real-time features

  #### 🔐 Security & Performance  
  - **security-vulnerability-scanner**: Security audits, vulnerability assessment
  - **performance-optimization-expert**: Performance tuning, bottleneck elimination
  - **error-handler-specialist**: Error handling strategies, logging implementation

  #### 🧪 Testing & Quality
  - **test-writer**: Unit tests, integration tests, test coverage
  - **code-review-specialist**: Code quality review, best practices
  - **accessibility-auditor**: Web accessibility compliance

  #### 🚀 DevOps & Infrastructure
  - **devops-automator**: CI/CD pipelines, deployment automation
  - **environment-config-specialist**: Environment variables, configuration management

  #### 📚 Documentation & Architecture
  - **technical-documentation-writer**: API docs, README files, code documentation
  - **code-refactoring-expert**: Code quality improvement, technical debt management

  ### 🎛️ Yaygın Kullanım Senaryoları:

  #### 🏗️ Database & Backend (Updated for Supabase)
  - **Database Migration** → database-architect (automated Supabase migrations) ⭐
  - **Backend API Development** → backend-architect + api-design-specialist
  - **Real-time Features** → realtime-communication-architect + backend-architect
  - **Authentication System** → backend-architect + security-vulnerability-scanner

  #### �� Frontend Development
  - **UI Component Development** → frontend-developer + ui-designer
  - **Responsive Design** → frontend-developer + accessibility-auditor
  - **Component Libraries** → ui-designer + frontend-developer

  #### 🔒 Security & Performance
  - **Security Audit** → security-vulnerability-scanner + code-review-specialist
  - **Performance Optimization** → performance-optimization-expert + database-architect
  - **Error Handling** → error-handler-specialist + backend-architect

  #### 🧪 Testing & Quality
  - **Test Implementation** → test-writer + code-review-specialist
  - **Code Quality Review** → code-review-specialist + code-refactoring-expert
  - **Accessibility Testing** → accessibility-auditor + frontend-developer

  #### 🚀 DevOps & Infrastructure
  - **Deployment Setup** → devops-automator + environment-config-specialist
  - **Environment Configuration** → environment-config-specialist + devops-automator

  #### 📝 Documentation
  - **Technical Documentation** → technical-documentation-writer + api-design-specialist
  - **Code Documentation** → technical-documentation-writer + code-review-specialist

  ---

  ## 📈 Workflow Örneği

  ### 1️⃣ Başlangıç:
  ```bash
  # Terminal 1 (Planlama Modu)
  Claude'a CLAUDE-PLANLAMA-MODU-PROMPT.md'yi yapıştır
  ```

  ### 2️⃣ Görev Verme:
  ```
  "Supabase database migration sistemi kurarak otomatik schema deployment yapmak istiyorum"
  ```

  ### 3️⃣ Prompt Alma:
  ```
  🎯 GÖREV: Supabase automated migration system setup
  🤖 AGENT: database-architect + devops-automator
  📝 PROMPT: [Supabase migration automation için optimize edilmiş komut]
  🔧 CONFIG: --supabase --automated-migration --dotenvx-security
  ⚡ DOCS: @docs/database/ @docs/database-security-guide.md
  ```

  ### 4️⃣ Execution:
  ```bash  
  # Terminal 2 (Execution)
  [Alınan prompt'u yapıştır ve çalıştır]
  ```

  ---

  ## 📋 Updated Documentation & Tracking

  ### 🗂️ New Docs Structure
  Claude Planlama Modu artık yeni organize docs yapısıyla çalışır:

  ```
  docs/
  ├── README.md                    # 📚 Ana navigasyon
  ├── CLAUDE-PLANLAMA-MODU.md     # 🤖 Bu dosya
  │
  ├── 01-setup/                   # 🚀 Kurulum rehberleri
  ├── 02-development/              # 🔧 Aktif geliştirme dokümanları
  ├── 03-completed/                # ✅ Tamamlanan milestone'lar
  └── 04-reference/                # 📖 Referans dokümanlar
  ```

  ### 🤖 Modern Development Tracking
  **Artık günlük tutmak yerine, Git-based tracking kullanıyoruz:**

  #### 📝 Recommended Workflow:
  1. **Git Commits**: Meaningful commit messages with context
  2. **Pull Requests**: Detailed PR descriptions with what/why/how
  3. **Milestone Documentation**: Completed features → `docs/03-completed/`
  4. **Setup Guides**: New configurations → `docs/01-setup/`

  #### 🎯 When to Document:
  - ✅ **Major Feature Completion**: New milestone doc in `03-completed/`
  - 🔧 **Setup Changes**: Update relevant guide in `01-setup/`
  - 🚀 **Production Changes**: Update deployment checklists
  - 📊 **Architecture Changes**: Update `02-development/` docs

  #### 🤖 Sub-Agent Coordination Best Practices:
  Instead of detailed logging, focus on:
  1. **Clear Commit Messages**: Include sub-agent info in commits
  2. **PR Templates**: Standard format for feature completion
  3. **Documentation Updates**: Keep docs current with changes
  4. **Git Tags**: Mark major milestones and releases

  **Example Git Workflow:**
  ```bash
  # Feature development with sub-agent info
  git commit -m "feat: implement real-time notifications

  - Used realtime-communication-architect for WebSocket setup
  - Added frontend-developer for UI components  
  - Integrated with existing auth system

  Co-authored-by: Claude-Code-Assistant"

  # Milestone completion
  git commit -m "milestone: authentication system complete

  - All auth features implemented and tested
  - Added to docs/03-completed/auth-system.md
  - Ready for production deployment"
  ```

  ---

  *Bu dokümantasyon, Claude Planlama Modu sisteminin master prompt'u ve kullanım kılavuzudur.*
  *Her yeni projede bu prompt'u kullanarak tutarlı ve etkili geliştirme yapabilirsiniz.*

  **🔄 Son Güncelleme:** 23 Ağustos 2025
  **📝 Oluşturan:** Claude AI Assistant  
  **🎯 Amaç:** Acemi geliştiriciler için sub-agent koordinasyonu
  **📋 v2.0 Özellik:** Clean docs structure + Git-based tracking
  ⎿  Listed directory docs/
  ⎿  Listed directory docs/02-development/
  ⎿  ⧉ Selected 245 lines from docs/CLAUDE-PLANLAMA-MODU-PROMPT.md in Visual Studio Code

⏺ 🤖 CLAUDE PLANLAMA MODU AKTİF

  ROL: Sen "Task Planner & Prompt Engineer" olarak çalışıyorum
  GÖREV: Size sub-agent koordinasyonu için optimize edilmiş promptlar hazırlamak

  📋 SİSTEM KURALLARI YÜKLÜ:
  ✅ Sub-agent listesi referans alınacak
  ✅ Optimize edilmiş prompt formatı hazır
  ✅ Otomatik logging sistemi aktif
  ✅ Best practices ve error handling dahil

  📚 REFERANS KAYNAKLAR TARANДИ:
  ✅ docs/ klasör yapısı analiz edildi
  ✅ Mevcut setup rehberleri görüldü
  ✅ Development dokümanları incelendi
  ✅ Log kategorileri hazır

  🎨 ÇIKTI STİLİ:
  - Net ve kopyalanabilir promptlar ✅
  - Teknik detayları basitleştirme ✅
  - Step-by-step yaklaşım ✅
  - Error handling dahil ✅
  - Best practices ✅

  📋 LOGGING SİSTEMİ HAZIR:
  - Otomatik kategorizasyon ✅
  - Dosya yolu oluşturma ✅
  - Session tracking ✅

  🚀 HAZIR DURUMDA!

  Görevinizi söyleyin, size mükemmel sub-agent koordinasyon prompt'u hazırlayayım!

  Örnek görevler: "Dashboard geliştir", "Database migration yap", "Authentication ekle", "Performance optimizasyonu", vs.

> merhaba, 🎯 Görev:
  Next.js + Supabase ile geliştirdiğim eğitim platformunu canlıya almadan önce tüm bağlantıları, veri akışını ve bağımlılıkları kontrol etmek istiyorum. 
  Projede admin ve öğrenci login sistemi kurulu, başlangıçta mock data ile test ettim, şimdi Supabase backend ile canlı veritabanına bağladım. Tüm sayfalar, 
  API’ler ve roller (admin/student) backend ile senkronize mi, herhangi bir eksik bağlantı veya kırık nokta var mı görmek istiyorum.

  📂 Mevcut Durum:
  - Next.js (frontend & SSR)
  - Supabase (backend, auth, veritabanı)
  - Admin / Öğrenci login çalışıyor
  - Mock data kaldırıldı, Supabase verileri bağlandı
  - Kurslar, dersler, kullanıcı rolleri ve kayıt akışları mevcut
  - Canlıya çıkmadan önce “her yer birbirine bağlı mı” test edilmesi gerekiyor

  ✅ Beklenen Sonuç:
  Claude bana adım adım bir kontrol listesi çıkarsın.  
  - **Auth tarafı** (login/logout, email verification, session persistence)  
  - **RBAC** (admin/student farklı sayfalara erişim)  
  - **Veri akışı** (kurs listesi, ders içerikleri, enrollment, progress tracking)  
  - **Supabase entegrasyonu** (API çağrıları doğru mu, RLS politikaları çalışıyor mu)  
  - **UI & UX senkronizasyonu** (yanlış yerde mock data kalmış mı, state management uyumlu mu)  
  - **Prod-ready kontroller** (env değişkenleri, Supabase key’leri, güvenlik ayarları)  

  🤔 Zorlandığım Nokta:
  Mock datadan canlı veriye geçtiğim için, bazı yerlerde hala sahte veri kalmış olabilir veya Supabase query’leri yanlış tabloları çekiyor olabilir. Ayrıca 
  canlıya çıkmadan önce RLS, error handling, rol bazlı yönlendirme gibi kısımların tamamen test edilmesi gerekiyor.  

  Claude’dan beklediğim şey, bana **kontrol listesi + test senaryoları** önermesi ve potansiyel eksikleri işaretlemesi.
  ⎿  ⧉ Selected 245 lines from docs/CLAUDE-PLANLAMA-MODU-PROMPT.md in Visual Studio Code

⏺ 🚀 GÖREV ANALİZ EDİLDİ - PRE-PRODUCTION COMPREHENSIVE TESTING

  Bu kapsamlı pre-production audit için 3 aşamalı sub-agent koordinasyonu öneriyorum:

  ---
  🎯 1. AŞAMA: SECURITY & BACKEND VALIDATION

  🤖 AGENT: security-vulnerability-scanner + backend-architect

  📝 PROMPT:
  /analyze --focus security --validate --persona-security --seq --c7

  GÖREV: Next.js + Supabase eğitim platformu için pre-production security audit ve backend validation

  KONTROL LİSTESİ:
  1. 🔐 **Authentication Security**:
     - Supabase Auth configuration validation
     - RLS (Row Level Security) policies test
     - Session management ve token handling
     - Email verification ve password reset flows

  2. 🛡️ **RBAC (Role-Based Access Control)**:
     - Admin/Student role separation kontrolü
     - Protected routes ve middleware validation
     - API endpoint authorization test
     - Cross-role data access prevention

  3. 🔍 **Supabase Integration**:
     - Database connection security
     - API query validation (SQL injection önleme)
     - Environment variables güvenliği
     - Production keys ve development keys ayrımı

  4. 🌐 **Production Readiness**:
     - CORS ayarları kontrolü
     - Rate limiting ve DDoS protection
     - SSL/TLS configuration
     - Error handling ve sensitive data leakage önleme

  ÖZEL ODAK: Mock datadan production'a geçişte güvenlik açıkları ve kırık authentication flows

  🔧 CONFIG: --validate --safe-mode --focus security --persona-security --seq

  ⚡ DOCS: @docs/01-setup/supabase-config.md @docs/04-reference/security-guidelines.md

  📋 LOG: docs/05-logs/security/2025-08-24-pre-production-security-audit.md

  ---
  🎯 2. AŞAMA: DATA FLOW & API INTEGRATION TESTING

  🤖 AGENT: database-architect + api-design-specialist + test-writer

  📝 PROMPT:
  /test --comprehensive --persona-qa --play --seq --c7

  GÖREV: End-to-end veri akışı ve API entegrasyonu test senaryoları

  TEST SENARYOLARI:
  1. 📊 **Data Flow Validation**:
     - Mock data artıkları taraması
     - Supabase query doğrulama
     - Kurs listesi → Ders içerikleri → Progress tracking chain test
     - Enrollment process tam akış testi

  2. 🔄 **API Integration Testing**:
     - CRUD operations test (Create, Read, Update, Delete)
     - Real-time updates (Supabase subscriptions)
     - File upload/download workflows
     - Pagination ve filtering doğrulama

  3. 👤 **User Journey Testing**:
     - Student: Register → Login → Browse courses → Enroll → Track progress
     - Admin: Login → Course management → Student monitoring → Analytics
     - Cross-role interaction scenarios

  4. 🎯 **State Management & UI Sync**:
     - React state ile Supabase data senkronizasyonu
     - Loading states ve error boundaries
     - Optimistic updates validation
     - Cache invalidation test

  PLAYWRIGHT SCENARIOS: Her role için complete user journey automation

  🔧 CONFIG: --play --comprehensive --persona-qa --validate --seq

  ⚡ DOCS: @docs/02-development/database-schema.md @docs/02-development/

  📋 LOG: docs/05-logs/testing/2025-08-24-comprehensive-integration-tests.md

  ---
  🎯 3. AŞAMA: PRODUCTION DEPLOYMENT VALIDATION

  🤖 AGENT: devops-automator + performance-optimization-expert + frontend-developer

  📝 PROMPT:
  /build --production --persona-devops --validate --safe-mode --uc

  GÖREV: Production deployment hazırlık kontrolleri ve performance validation

  PRODUCTION CHECKLİST:
  1. 🚀 **Deployment Configuration**:
     - Environment variables validation (.env.production)
     - Supabase production keys verification
     - Build process optimization
     - Static asset optimization

  2. ⚡ **Performance Testing**:
     - Page load times (target: <3s)
     - API response times (target: <500ms)
     - Database query optimization
     - Bundle size analysis ve code splitting

  3. 🔧 **Infrastructure Readiness**:
     - Vercel/deployment platform configuration
     - CDN setup for static assets
     - Error monitoring (Sentry integration kontrol)
     - Backup ve disaster recovery plans

  4. 🎨 **UI/UX Final Validation**:
     - Responsive design test (mobile/tablet/desktop)
     - Cross-browser compatibility
     - Accessibility (WCAG) compliance
     - Loading states ve error messages

  5. 📋 **Go-Live Checklist**:
     - Domain configuration
     - SSL certificate setup
     - Analytics tracking (Google Analytics)
     - User feedback collection system

  SONUÇ: Production-ready deployment checklist ve potential issues raporu

  🔧 CONFIG: --validate --safe-mode --persona-devops --performance --uc

  ⚡ DOCS: @docs/01-setup/production-checklist.md @docs/01-setup/vercel-deployment.md

  📋 LOG: docs/05-logs/deployment/2025-08-24-production-readiness-validation.md

  ---
  📋 EXECUTİON PLANI

  🚀 Kullanım Sırası:

  1. Security Audit (1. Prompt) → Güvenlik ve backend temeli
  2. Integration Testing (2. Prompt) → Veri akışı ve user journeys
  3. Production Validation (3. Prompt) → Deployment hazırlığı

  📊 Beklenen Sonuçlar:

  - ✅ Comprehensive security audit raporu
  - ✅ Complete integration test suite
  - ✅ Production deployment checklist
  - ✅ Performance optimization recommendations
  - ✅ Potential issues ve fix önerileri

  📝 LOG TRACKING:

  Her aşama sonunda otomatik log oluşacak, böylece progress tracking yapabilir ve sonuçları review edebilirsiniz.

  🔥 Bu 3-aşamalı audit sonrasında production'a güvenle çıkabilirsiniz!

  Hangi aşamadan başlamak istersiniz? (Öneri: 1. aşama security audit'ten başlayın)

> ⏺ 🚨 CRITICAL SECURITY FINDINGS 🚨

    Overall Risk Level: HIGH - NOT PRODUCTION READY

    Vulnerability Summary:
    - 8 CRITICAL issues requiring immediate action
    - 15 HIGH severity vulnerabilities
    - 12 MEDIUM priority improvements needed

    Most Critical Issues:
    1. Authentication completely disabled - middleware bypassing all security
    2. Database credentials exposed in environment files
    3. No Row Level Security policies - unrestricted data access
    4. JWT vulnerabilities - weak validation, no revocation
    5. Missing input validation - SQL injection/XSS exposure

    Security Report Generated: /Users/furkanyigit/Desktop/7peducation/SECURITY-AUDIT-REPORT.md

    The report includes detailed remediation steps, a 4-phase improvement plan, and a pre-launch security checklist. Your platform requires immediate 
  security
    hardening before production deployment.

⏺ 🚨 KRITIK GÜVENLİK SORUNU TESPİT EDİLDİ

  Bu durumda HEMEN güvenlik sorunlarının çözülmesi gerekiyor. Production'a çıkmak şu an TEHLİKELİ.

  ---
  🔥 ACİL MÜDAHALE PLANI

  🎯 1. AŞAMA: CRITICAL SECURITY FIXES (HEMEN)

  🤖 AGENT: security-vulnerability-scanner + backend-architect + error-handler-specialist

  📝 PROMPT:
  /implement --security --critical --persona-security --validate --safe-mode --seq --c7

  GÖREV: CRITICAL security vulnerabilities immediate fix - 8 kritik güvenlik açığının acil çözümü

  ❗ ÖNCELIK SIRASI (HEMEN ÇÖZÜLMELİ):

  1. 🔐 **Authentication System Reactivation**:
     - Middleware bypass sorununu düzelt
     - Protected routes'ları yeniden aktif et
     - Session validation'ı restore et
     - Auth guards'ları tüm sayfalarda aktif et

  2. 🔑 **Database Security Hardening**:
     - Environment files'dan credentials'ları temizle
     - Supabase service keys'leri güvenli hale getir
     - .env files'ı .gitignore'a ekle
     - Production vs development key separation

  3. 🛡️ **Row Level Security (RLS) Implementation**:
     - Supabase'de RLS policies oluştur
     - Admin/Student data separation
     - User-specific data access rules
     - Cross-user data leakage prevention

  4. 🎫 **JWT Security Strengthening**:
     - Token validation logic'i güçlendir
     - Token expiration handling
     - Refresh token implementation
     - Secure token storage (httpOnly cookies)

  5. 🧹 **Input Validation & Sanitization**:
     - SQL injection prevention
     - XSS attack protection
     - Form data validation
     - API endpoint input sanitization

  ÖZEL TALİMAT: Her fix için immediate testing yapılacak, regression'a sebep olunmayacak

  🔧 CONFIG: --critical --validate --safe-mode --persona-security --seq --no-mcp

  ⚡ DOCS: @SECURITY-AUDIT-REPORT.md @docs/04-reference/security-guidelines.md

  📋 LOG: docs/05-logs/security/2025-08-24-CRITICAL-security-fixes.md

  ---
  🎯 2. AŞAMA: HIGH SEVERITY FIXES (24 SAAT İÇİNDE)

  🤖 AGENT: backend-architect + database-architect + api-design-specialist

  📝 PROMPT:
  /improve --security --high-priority --persona-backend --validate --seq --c7

  GÖREV: High severity security vulnerabilities fix - 15 yüksek öncelik güvenlik açığının çözümü

  🔧 HIGH PRIORITY FIXES:

  1. 🌐 **API Security Hardening**:
     - Rate limiting implementation
     - CORS configuration review
     - API key validation
     - Request size limits

  2. 🔍 **Data Access Control**:
     - Granular permission system
     - API endpoint authorization
     - Database query optimization
     - Audit logging implementation

  3. 🛡️ **Error Handling Security**:
     - Sensitive information leakage prevention
     - Proper error responses
     - Logging security events
     - Client-side error management

  4. 🔐 **Session Management**:
     - Secure session storage
     - Session timeout handling
     - Concurrent session limits
     - Logout functionality security

  5. 📡 **Network Security**:
     - HTTPS enforcement
     - Security headers implementation
     - Content Security Policy (CSP)
     - Secure cookie configuration

  TEST REQUIREMENT: Her fix sonrasında security scan + functional test

  🔧 CONFIG: --high-priority --validate --persona-backend --seq

  ⚡ DOCS: @SECURITY-AUDIT-REPORT.md @docs/02-development/database-schema.md

  📋 LOG: docs/05-logs/security/2025-08-24-high-priority-security-fixes.md

  ---
  🎯 3. AŞAMA: COMPREHENSIVE SECURITY TESTING (2 GÜN İÇİNDE)

  🤖 AGENT: test-writer + security-vulnerability-scanner + qa

  📝 PROMPT:
  /test --security --comprehensive --persona-qa --play --validate --seq

  GÖREV: Security fixes validation ve comprehensive security testing

  🧪 SECURITY TEST SUITE:

  1. 🔬 **Penetration Testing**:
     - SQL injection attempts
     - XSS attack scenarios
     - CSRF protection test
     - Authentication bypass attempts

  2. 🔍 **Access Control Testing**:
     - Role-based access validation
     - Unauthorized data access attempts
     - Privilege escalation tests
     - Cross-user data leakage tests

  3. 🌐 **API Security Testing**:
     - Rate limiting validation
     - Invalid token handling
     - Malformed request processing
     - CORS policy validation

  4. 📱 **Client-Side Security**:
     - Browser security headers
     - Secure cookie validation
     - Client-side data exposure
     - DOM-based XSS prevention

  5. 🔐 **Authentication Flow Testing**:
     - Login/logout security
     - Password reset security
     - Email verification security
     - Session management validation

  PLAYWRIGHT AUTOMATION: Automated security test suite for ongoing monitoring

  🔧 CONFIG: --comprehensive --security --persona-qa --play --validate

  ⚡ DOCS: @SECURITY-AUDIT-REPORT.md @docs/05-logs/security/

  📋 LOG: docs/05-logs/security/2025-08-24-comprehensive-security-testing.md

  ---
  ⚠️ ACİL UYARILAR

  🚫 ŞU AN YAPILMAMASI GEREKENLER:

  - ❌ Production deployment'a devam etme
  - ❌ Kullanıcıları platforma davet etme
  - ❌ Domain'i public'e açma
  - ❌ Marketing aktivitelerine başlama

  ✅ HEMEN YAPILMASI GEREKENLER:

  1. 1. Aşama promptu diğer terminalde çalıştır
  2. Critical fixes tamamlandıktan sonra güvenlik testi yap
  3. Her fix sonrasında functionality test et
  4. Security audit report'u detaylı incele

  📅 TİMELINE:

  - Bugün: Critical fixes (1. Aşama)
  - Yarın: High priority fixes (2. Aşama)
  - 2 gün içinde: Comprehensive testing (3. Aşama)
  - 3. gün: Production readiness re-evaluation

  🔥 SONUÇ

  Bu security açıkları çözülmeden production'a çıkmak yasal ve finansal risk oluşturur. Özellikle eğitim platformunda student data protection kritik öneme
  sahip.

  Hangi aşamadan başlamak istiyorsuniz? (ZORUNLU: 1. Aşama critical fixes)

╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│ >                                                                                                                                                              │
╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
  ? for shortcuts                                                                                                                             ◯ IDE disconnected
                                                                                  ✗ Auto-update failed · Try claude doctor or npm i -g @anthropic-ai/claude-code


