diff --git a/src/lib/env.ts b/src/lib/env.ts
new file mode 100644
index 0000000..a1b2c3d
--- /dev/null
+++ b/src/lib/env.ts
@@ -0,0 +1,31 @@
+/**
+ * 7P Education - Environment Configuration
+ * 
+ * Centralized environment variable management for payment modes and feature flags
+ */
+
+// Payment Mode Configuration
+export const PAYMENTS_MODE = process.env.PAYMENTS_MODE ?? 'disabled';
+export const STRIPE_ENABLED = PAYMENTS_MODE === 'stripe';
+
+// Feature Flags
+export const FEATURE_ENROLL_FREE = process.env.FEATURE_ENROLL_FREE === 'true';
+
+// Free Enrollment Configuration
+export const FREE_ENROLLMENT_CODE = process.env.FREE_ENROLLMENT_CODE ?? null;
+
+// Existing environment variables (re-exported for convenience)
+export const NEXT_PUBLIC_SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL!;
+export const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY!;
+
+/**
+ * Validate critical environment configuration
+ */
+export function validateEnvironment() {
+  if (!NEXT_PUBLIC_SUPABASE_URL) {
+    throw new Error('NEXT_PUBLIC_SUPABASE_URL is required');
+  }
+  if (!SUPABASE_SERVICE_KEY) {
+    throw new Error('SUPABASE_SERVICE_KEY is required');
+  }
+}

diff --git a/src/lib/payment-guard.ts b/src/lib/payment-guard.ts
new file mode 100644
index 0000000..a1b2c3d
--- /dev/null
+++ b/src/lib/payment-guard.ts
@@ -0,0 +1,73 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { STRIPE_ENABLED } from '@/lib/env';
+import { getSecurityHeaders } from '@/lib/security';
+
+/**
+ * 7P Education - Payment Guard Middleware
+ * 
+ * Guards payment-related routes when payments are disabled
+ * Returns 501 Not Implemented when PAYMENTS_MODE !== 'stripe'
+ */
+
+interface PaymentDisabledResponse {
+  success: false;
+  message: 'payments_disabled';
+  error: string;
+  mode: string;
+}
+
+/**
+ * Create a standardized response when payments are disabled
+ */
+export function createPaymentDisabledResponse(): NextResponse<PaymentDisabledResponse> {
+  return NextResponse.json(
+    {
+      success: false,
+      message: 'payments_disabled',
+      error: 'Payment processing is currently disabled. Contact support for assistance.',
+      mode: 'disabled',
+    },
+    {
+      status: 501,
+      headers: getSecurityHeaders(),
+    }
+  );
+}
+
+/**
+ * Middleware wrapper that guards payment routes
+ * @param handler The original route handler
+ * @returns Guarded route handler
+ */
+export function withPaymentGuard<T = any>(
+  handler: (request: NextRequest, context?: T) => Promise<NextResponse>
+) {
+  return async (request: NextRequest, context?: T): Promise<NextResponse> => {
+    // Check if payments are enabled
+    if (!STRIPE_ENABLED) {
+      return createPaymentDisabledResponse();
+    }
+
+    // Payments are enabled, proceed with original handler
+    return handler(request, context);
+  };
+}
+
+/**
+ * Check if payments are enabled (for use in components)
+ * @returns boolean indicating if payments are enabled
+ */
+export function isPaymentsEnabled(): boolean {
+  return STRIPE_ENABLED;
+}
+
+/**
+ * Get payment mode information (for debugging/monitoring)
+ */
+export function getPaymentModeInfo() {
+  return {
+    enabled: STRIPE_ENABLED,
+    mode: STRIPE_ENABLED ? 'stripe' : 'disabled',
+    timestamp: new Date().toISOString(),
+  };
+}

diff --git a/src/app/api/enroll/free/route.ts b/src/app/api/enroll/free/route.ts
new file mode 100644
index 0000000..a1b2c3d
--- /dev/null
+++ b/src/app/api/enroll/free/route.ts
@@ -0,0 +1,274 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { createClient } from '@supabase/supabase-js';
+import { getServerSession } from 'next-auth/next';
+import { authOptions } from '../../auth/[...nextauth]/route';
+import { rateLimit, getSecurityHeaders, validatePayload, isValidUUID } from '@/lib/security';
+import { FEATURE_ENROLL_FREE, FREE_ENROLLMENT_CODE, SUPABASE_SERVICE_KEY, NEXT_PUBLIC_SUPABASE_URL } from '@/lib/env';
+
+/**
+ * 7P Education - Free Enrollment API
+ * 
+ * POST /api/enroll/free
+ * Allows users to enroll in courses for free when payments are disabled
+ */
+
+interface EnrollFreeRequest {
+  courseId: string;
+  code?: string;
+}
+
+interface EnrollFreeResponse {
+  success: boolean;
+  message?: string;
+  error?: string;
+  enrollment?: {
+    id: string;
+    courseId: string;
+    userId: string;
+    plan: string;
+    status: string;
+    enrolledAt: string;
+  };
+}
+
+export async function POST(request: NextRequest): Promise<NextResponse<EnrollFreeResponse>> {
+  try {
+    // Rate limiting
+    const rateLimitResult = await rateLimit.check(request, '/api/enroll/free', { max: 5, window: '1m' });
+    if (!rateLimitResult.success) {
+      return NextResponse.json(
+        { success: false, error: 'Rate limit exceeded. Please try again later.' },
+        { 
+          status: 429,
+          headers: getSecurityHeaders(),
+        }
+      );
+    }
+
+    // Feature flag check
+    if (!FEATURE_ENROLL_FREE) {
+      return NextResponse.json(
+        { success: false, error: 'Free enrollment is not enabled' },
+        { 
+          status: 501,
+          headers: getSecurityHeaders(),
+        }
+      );
+    }
+
+    // Authentication check
+    const session = await getServerSession(authOptions);
+    if (!session?.user?.id) {
+      return NextResponse.json(
+        { success: false, error: 'Authentication required' },
+        { 
+          status: 401,
+          headers: getSecurityHeaders(),
+        }
+      );
+    }
+
+    // Parse and validate request body
+    const body = await request.json();
+    validatePayload(body, ['courseId']);
+
+    const { courseId, code }: EnrollFreeRequest = body;
+
+    // Validate courseId format
+    if (!isValidUUID(courseId)) {
+      return NextResponse.json(
+        { success: false, error: 'Invalid course ID format' },
+        { 
+          status: 400,
+          headers: getSecurityHeaders(),
+        }
+      );
+    }
+
+    // Validate enrollment code if required
+    if (FREE_ENROLLMENT_CODE) {
+      if (!code || code !== FREE_ENROLLMENT_CODE) {
+        return NextResponse.json(
+          { success: false, error: 'Invalid or missing enrollment code' },
+          { 
+            status: 403,
+            headers: getSecurityHeaders(),
+          }
+        );
+      }
+    }
+
+    // Initialize Supabase admin client
+    if (!NEXT_PUBLIC_SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
+      return NextResponse.json(
+        { success: false, error: 'Server configuration error' },
+        { 
+          status: 500,
+          headers: getSecurityHeaders(),
+        }
+      );
+    }
+
+    const supabase = createClient(NEXT_PUBLIC_SUPABASE_URL, SUPABASE_SERVICE_KEY);
+
+    // Check if course exists
+    const { data: course, error: courseError } = await supabase
+      .from('courses')
+      .select('id, title, status')
+      .eq('id', courseId)
+      .single();
+
+    if (courseError || !course) {
+      return NextResponse.json(
+        { success: false, error: 'Course not found' },
+        { 
+          status: 404,
+          headers: getSecurityHeaders(),
+        }
+      );
+    }
+
+    if (course.status !== 'published') {
+      return NextResponse.json(
+        { success: false, error: 'Course is not available for enrollment' },
+        { 
+          status: 400,
+          headers: getSecurityHeaders(),
+        }
+      );
+    }
+
+    // Check if user is already enrolled
+    const { data: existingEnrollment } = await supabase
+      .from('enrollments')
+      .select('id, status')
+      .eq('course_id', courseId)
+      .eq('user_id', session.user.id)
+      .single();
+
+    if (existingEnrollment) {
+      return NextResponse.json(
+        { success: false, error: 'Already enrolled in this course' },
+        { 
+          status: 409,
+          headers: getSecurityHeaders(),
+        }
+      );
+    }
+
+    // Create free enrollment
+    const enrollmentData = {
+      course_id: courseId,
+      user_id: session.user.id,
+      plan: 'free',
+      status: 'active',
+      enrolled_at: new Date().toISOString(),
+      payment_status: 'free',
+      metadata: {
+        enrollment_type: 'free',
+        enrollment_code_used: !!FREE_ENROLLMENT_CODE,
+        created_via: 'api/enroll/free',
+      },
+    };
+
+    const { data: enrollment, error: enrollmentError } = await supabase
+      .from('enrollments')
+      .insert(enrollmentData)
+      .select('*')
+      .single();
+
+    if (enrollmentError) {
+      console.error('Free enrollment creation failed:', enrollmentError);
+      return NextResponse.json(
+        { success: false, error: 'Failed to create enrollment' },
+        { 
+          status: 500,
+          headers: getSecurityHeaders(),
+        }
+      );
+    }
+
+    // Log audit event
+    const auditData = {
+      user_id: session.user.id,
+      action: 'enrollment_created',
+      resource_type: 'course',
+      resource_id: courseId,
+      details: {
+        enrollment_id: enrollment.id,
+        enrollment_type: 'free',
+        course_title: course.title,
+        enrollment_code_used: !!FREE_ENROLLMENT_CODE,
+      },
+      ip_address: request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown',
+      user_agent: request.headers.get('user-agent') || 'unknown',
+      created_at: new Date().toISOString(),
+    };
+
+    await supabase
+      .from('audit_logs')
+      .insert(auditData);
+
+    // Return success response
+    return NextResponse.json(
+      {
+        success: true,
+        message: 'Successfully enrolled in course',
+        enrollment: {
+          id: enrollment.id,
+          courseId: enrollment.course_id,
+          userId: enrollment.user_id,
+          plan: enrollment.plan,
+          status: enrollment.status,
+          enrolledAt: enrollment.enrolled_at,
+        },
+      },
+      { 
+        status: 201,
+        headers: getSecurityHeaders(),
+      }
+    );
+
+  } catch (error) {
+    console.error('Free enrollment API error:', error);
+    
+    return NextResponse.json(
+      { success: false, error: 'Internal server error' },
+      { 
+        status: 500,
+        headers: getSecurityHeaders(),
+      }
+    );
+  }
+}
+
+// Method not allowed for other HTTP methods
+export async function GET(): Promise<NextResponse> {
+  return NextResponse.json(
+    { success: false, error: 'Method not allowed' },
+    { 
+      status: 405,
+      headers: { ...getSecurityHeaders(), Allow: 'POST' },
+    }
+  );
+}
+
+export async function PUT(): Promise<NextResponse> {
+  return NextResponse.json(
+    { success: false, error: 'Method not allowed' },
+    { 
+      status: 405,
+      headers: { ...getSecurityHeaders(), Allow: 'POST' },
+    }
+  );
+}
+
+export async function DELETE(): Promise<NextResponse> {
+  return NextResponse.json(
+    { success: false, error: 'Method not allowed' },
+    { 
+      status: 405,
+      headers: { ...getSecurityHeaders(), Allow: 'POST' },
+    }
+  );
+}

diff --git a/src/hooks/usePaymentMode.ts b/src/hooks/usePaymentMode.ts
new file mode 100644
index 0000000..a1b2c3d
--- /dev/null
+++ b/src/hooks/usePaymentMode.ts
@@ -0,0 +1,80 @@
+"use client";
+
+import { useState, useEffect } from 'react';
+
+interface PaymentModeInfo {
+  paymentsEnabled: boolean;
+  mode: 'stripe' | 'disabled';
+  loading: boolean;
+  error: string | null;
+}
+
+/**
+ * Hook to check if payments are enabled
+ * @returns PaymentModeInfo object with payment status
+ */
+export function usePaymentMode(): PaymentModeInfo {
+  const [paymentMode, setPaymentMode] = useState<PaymentModeInfo>({
+    paymentsEnabled: false,
+    mode: 'disabled',
+    loading: true,
+    error: null
+  });
+
+  useEffect(() => {
+    // Check payment mode from environment or API
+    const checkPaymentMode = async () => {
+      try {
+        // Option 1: Check via health endpoint (recommended)
+        const response = await fetch('/api/health');
+        const healthData = await response.json();
+        
+        const stripeEnabled = healthData.checks?.stripe !== null;
+        
+        setPaymentMode({
+          paymentsEnabled: stripeEnabled,
+          mode: stripeEnabled ? 'stripe' : 'disabled',
+          loading: false,
+          error: null
+        });
+      } catch (error) {
+        // Option 2: Fallback - assume payments disabled if health check fails
+        console.warn('Failed to check payment mode, defaulting to disabled:', error);
+        setPaymentMode({
+          paymentsEnabled: false,
+          mode: 'disabled',
+          loading: false,
+          error: 'Failed to check payment status'
+        });
+      }
+    };
+
+    checkPaymentMode();
+  }, []);
+
+  return paymentMode;
+}
+
+/**
+ * Simple hook to check if payments are enabled (without loading state)
+ * @returns boolean indicating if payments are enabled
+ */
+export function usePaymentsEnabled(): boolean {
+  const { paymentsEnabled } = usePaymentMode();
+  return paymentsEnabled;
+}
+
+export default usePaymentMode;

diff --git a/src/app/api/health/route.ts b/src/app/api/health/route.ts
index a1b2c3d..d4e5f6g7 100644
--- a/src/app/api/health/route.ts
+++ b/src/app/api/health/route.ts
@@ -2,6 +2,7 @@ import { NextRequest, NextResponse } from 'next/server';
 import { createClient } from '@supabase/supabase-js';
 import { withApiMonitoring } from '@/middleware/monitoring';
 import { log } from '@/lib/monitoring/logger';
+import { STRIPE_ENABLED, NEXT_PUBLIC_SUPABASE_URL, SUPABASE_SERVICE_KEY } from '@/lib/env';
 
 export const GET = withApiMonitoring(async (request: NextRequest) => {
   const startTime = performance.now();
@@ -17,7 +18,7 @@ export const GET = withApiMonitoring(async (request: NextRequest) => {
       checks: {
         database: false,
         memory: false,
         disk: false,
-        stripe: false,
+        stripe: STRIPE_ENABLED ? false : null, // Only check Stripe if enabled
       },
       metrics: {
         responseTime: 0,
@@ -74,7 +75,7 @@ export const GET = withApiMonitoring(async (request: NextRequest) => {
   healthData.checks.disk = true;
 
   // Check Stripe connection (only if payments are enabled)
-  if (process.env.STRIPE_SECRET_KEY) {
+  if (STRIPE_ENABLED) {
     try {
       // Only check if we have Stripe configuration
       if (process.env.STRIPE_SECRET_KEY) {

diff --git a/src/app/api/payments/create-payment-intent/route.ts b/src/app/api/payments/create-payment-intent/route.ts
index a1b2c3d..d4e5f6g7 100644
--- a/src/app/api/payments/create-payment-intent/route.ts
+++ b/src/app/api/payments/create-payment-intent/route.ts
@@ -9,9 +9,10 @@ import {
 } from '@/lib/payments';
 import { supabase } from '@/lib/supabase';
+import { withPaymentGuard } from '@/lib/payment-guard';
 import Stripe from 'stripe';
 
-export async function POST(request: NextRequest) {
+export const POST = withPaymentGuard(async (request: NextRequest) => {
   try {
     const { courseId, bundleId } = await request.json();
 
@@ -151,4 +152,4 @@ export async function POST(request: NextRequest) {
       { status: 500 }
     );
   }
-}
+});

diff --git a/src/app/api/payments/create-checkout-session/route.ts b/src/app/api/payments/create-checkout-session/route.ts
index a1b2c3d..d4e5f6g7 100644
--- a/src/app/api/payments/create-checkout-session/route.ts
+++ b/src/app/api/payments/create-checkout-session/route.ts
@@ -11,9 +11,10 @@ import {
   getCoursePrice 
 } from '@/lib/payments';
 import { supabase } from '@/lib/supabase';
+import { withPaymentGuard } from '@/lib/payment-guard';
 import Stripe from 'stripe';
 
-export async function POST(request: NextRequest) {
+export const POST = withPaymentGuard(async (request: NextRequest) => {
   try {
     const { 
       type, 
@@ -167,4 +168,4 @@ export async function POST(request: NextRequest) {
       { status: 500 }
     );
   }
-}
+});

diff --git a/src/app/api/payments/customer-portal/route.ts b/src/app/api/payments/customer-portal/route.ts
index a1b2c3d..d4e5f6g7 100644
--- a/src/app/api/payments/customer-portal/route.ts
+++ b/src/app/api/payments/customer-portal/route.ts
@@ -3,9 +3,10 @@ import { NextRequest, NextResponse } from 'next/server';
 import { createPortalSession, handleStripeError } from '@/lib/stripe';
 import { getStripeCustomerByUserId, logPaymentEvent } from '@/lib/payments';
 import { supabase } from '@/lib/supabase';
+import { withPaymentGuard } from '@/lib/payment-guard';
 import Stripe from 'stripe';
 
-export async function POST(request: NextRequest) {
+export const POST = withPaymentGuard(async (request: NextRequest) => {
   try {
     const { returnUrl } = await request.json();
 
@@ -66,4 +67,4 @@ export async function POST(request: NextRequest) {
       { status: 500 }
     );
   }
-}
+});

diff --git a/src/app/api/payments/history/route.ts b/src/app/api/payments/history/route.ts
index a1b2c3d..d4e5f6g7 100644
--- a/src/app/api/payments/history/route.ts
+++ b/src/app/api/payments/history/route.ts
@@ -2,8 +2,9 @@ import { mockApi } from '@/lib/mock-api';
 import { NextRequest, NextResponse } from 'next/server';
 import { getUserPaymentHistory } from '@/lib/payments';
 import { supabase } from '@/lib/supabase';
+import { withPaymentGuard } from '@/lib/payment-guard';
 
-export async function GET(request: NextRequest) {
+export const GET = withPaymentGuard(async (request: NextRequest) => {
   try {
     // Get authenticated user
     const { data: { user }, error: authError } = await supabase.auth.getUser();
@@ -38,4 +39,4 @@ export async function GET(request: NextRequest) {
       { status: 500 }
     );
   }
-}
+});

diff --git a/src/app/api/payments/subscriptions/route.ts b/src/app/api/payments/subscriptions/route.ts
index a1b2c3d..d4e5f6g7 100644
--- a/src/app/api/payments/subscriptions/route.ts
+++ b/src/app/api/payments/subscriptions/route.ts
@@ -12,10 +12,11 @@ import {
   logPaymentEvent 
 } from '@/lib/payments';
 import { supabase } from '@/lib/supabase';
+import { withPaymentGuard } from '@/lib/payment-guard';
 import Stripe from 'stripe';
 
 // GET - Get user's subscription and available plans
-export async function GET(request: NextRequest) {
+export const GET = withPaymentGuard(async (request: NextRequest) => {
   try {
     // Get authenticated user
     const { data: { user }, error: authError } = await supabase.auth.getUser();
@@ -46,10 +47,10 @@ export async function GET(request: NextRequest) {
       { status: 500 }
     );
   }
-}
+});
 
 // PATCH - Update subscription (cancel, reactivate, etc.)
-export async function PATCH(request: NextRequest) {
+export const PATCH = withPaymentGuard(async (request: NextRequest) => {
   try {
     const { action, cancelAtPeriodEnd = true } = await request.json();
 
@@ -162,4 +163,4 @@ export async function PATCH(request: NextRequest) {
       { status: 500 }
     );
   }
-}
+});

diff --git a/src/components/ui/course-card.tsx b/src/components/ui/course-card.tsx
index a1b2c3d..d4e5f6g7 100644
--- a/src/components/ui/course-card.tsx
+++ b/src/components/ui/course-card.tsx
@@ -18,6 +18,7 @@ import { Badge } from '@/components/ui/badge';
 import MockPaymentModal from '@/components/beta/MockPaymentModal';
 import toast from 'react-hot-toast';
+import { usePaymentMode } from '@/hooks/usePaymentMode';
 
 interface CourseCardProps {
   course: {
@@ -59,6 +60,7 @@ const CourseCard: React.FC<CourseCardProps> = ({
   const [showMockPayment, setShowMockPayment] = useState(false);
   const [enrolling, setEnrolling] = useState(false);
   const router = useRouter();
+  const { paymentsEnabled } = usePaymentMode();
   const formatPrice = (price: number, currency: string = 'TRY') => {
     const symbol = currency === 'TRY' ? '₺' : '$';
     return `${symbol}${price.toLocaleString()}`;
@@ -86,6 +88,28 @@ const CourseCard: React.FC<CourseCardProps> = ({
 
   const isListMode = className?.includes('flex-row');
 
+  const handleFreeEnrollment = async (courseId: string) => {
+    setEnrolling(true);
+    try {
+      const response = await fetch('/api/enroll/free', {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify({
+          courseId,
+        }),
+      });
+
+      if (!response.ok) {
+        const errorData = await response.json();
+        throw new Error(errorData.error || 'Enrollment failed');
+      }
+
+      const data = await response.json();
+      toast.success('🎉 Kursa başarıyla kaydoldunuz! Dashboard\'a yönlendiriliyor...');
+      
+      setTimeout(() => {
+        router.push('/dashboard');
+      }, 2000);
+    } catch (error: any) {
+      toast.error(error.message || 'Kayıt sırasında bir hata oluştu');
+    } finally {
+      setEnrolling(false);
+    }
+  };
+  
   return (
     <div className={`rounded-2xl border border-slate-200 dark:border-gray-700 bg-white dark:bg-gray-800 shadow-sm hover:shadow-md transition-all duration-300 hover:border-blue-300 dark:hover:border-blue-500 group ${className}`}>
       {/* Course Image */}
@@ -109,7 +133,17 @@ const CourseCard: React.FC<CourseCardProps> = ({
               ÜCRETSİZ
             </div>
           )}
-          {!isEnrolled && !course.is_free && (
+          {!isEnrolled && !course.is_free && !paymentsEnabled && (
+            <div key="test-badge" className="px-2 py-0.5 rounded-md text-xs bg-gradient-to-r from-orange-100 to-yellow-100 text-orange-700 border-0 inline-flex items-center font-semibold animate-pulse">
+              <Sparkles className="w-3 h-3 mr-1" />
+              TEST ÜCRETSİZ
+            </div>
+          )}
+          {!isEnrolled && !course.is_free && paymentsEnabled && (
             <div key="beta-badge" className="px-2 py-0.5 rounded-md text-xs bg-gradient-to-r from-purple-100 to-blue-100 text-purple-700 border-0 inline-flex items-center font-semibold animate-pulse">
               <Sparkles className="w-3 h-3 mr-1" />
               BETA ÜCRETSİZ
@@ -184,7 +218,19 @@ const CourseCard: React.FC<CourseCardProps> = ({
                 {course.is_free ? (
                   <span className="text-xl font-bold text-blue-600 dark:text-blue-400">
                     ÜCRETSİZ
                   </span>
+                ) : !paymentsEnabled ? (
+                  <div className="flex flex-col">
+                    <span className="text-sm text-slate-400 dark:text-gray-500 line-through">
+                      {formatPrice(course.price, course.currency)}
+                    </span>
+                    <span className="text-xl font-bold text-orange-600 dark:text-orange-400 flex items-center gap-1">
+                      <Gift className="w-4 h-4" />
+                      TEST ÜCRETSİZ
+                    </span>
+                  </div>
                 ) : (
                   <div className="flex flex-col">
                     <span className="text-sm text-slate-400 dark:text-gray-500 line-through">
                       {formatPrice(course.price, course.currency)}
@@ -217,7 +263,11 @@ const CourseCard: React.FC<CourseCardProps> = ({
                 onClick={() => {
                   if (course.is_free) {
                     onPurchase?.(course.id);
+                  } else if (!paymentsEnabled) {
+                    // When payments are disabled, use free enrollment
+                    handleFreeEnrollment(course.id);
                   } else {
+                    // When payments are enabled, use mock payment (beta mode)
                     setShowMockPayment(true);
                   }
                 }}
                 disabled={loading || enrolling}
                 size="sm"
-                className={course.is_free 
+                className={course.is_free || !paymentsEnabled
                   ? "px-4 py-2 rounded-xl bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50"
                   : "px-4 py-2 rounded-xl bg-gradient-to-r from-green-600 to-blue-600 text-white hover:from-green-700 hover:to-blue-700 disabled:opacity-50 shadow-lg"
                 }
@@ -237,9 +287,13 @@ const CourseCard: React.FC<CourseCardProps> = ({
                 ) : course.is_free ? (
                   <ShoppingCart className="h-4 w-4 mr-1" />
+                ) : !paymentsEnabled ? (
+                  <ShoppingCart className="h-4 w-4 mr-1" />
                 ) : (
                   <Sparkles className="h-4 w-4 mr-1" />
                 )}
-                {loading || enrolling ? 'İşleniyor...' : (course.is_free ? 'Ücretsiz Al' : 'Beta\'da Ücretsiz Al!')}
+                {loading || enrolling ? 'İşleniyor...' : 
+                  course.is_free ? 'Ücretsiz Al' : 
+                  !paymentsEnabled ? 'Enroll (Free/Test)' : 
+                  'Beta\'da Ücretsiz Al!'}
               </Button>
             )}
           </div>

diff --git a/src/components/courses/MarketplaceCourseCard.tsx b/src/components/courses/MarketplaceCourseCard.tsx
index a1b2c3d..d4e5f6g7 100644
--- a/src/components/courses/MarketplaceCourseCard.tsx
+++ b/src/components/courses/MarketplaceCourseCard.tsx
@@ -16,6 +16,8 @@ import { Button } from '@/components/ui/button';
 import { Card, CardContent } from '@/components/ui/card';
 import { Badge } from '@/components/ui/badge';
+import { usePaymentMode } from '@/hooks/usePaymentMode';
+import toast from 'react-hot-toast';
 
 interface MarketplaceCourseCardProps {
   course: {
@@ -56,6 +58,8 @@ const MarketplaceCourseCard: React.FC<MarketplaceCourseCardProps> = ({
   loading = false
 }) => {
   const [showFullDescription, setShowFullDescription] = useState(false);
+  const [enrolling, setEnrolling] = useState(false);
+  const { paymentsEnabled } = usePaymentMode();
 
   const formatPrice = (price: number, currency: string = 'TRY') => {
     const symbol = currency === 'TRY' ? '₺' : '$';
@@ -119,6 +123,28 @@ const MarketplaceCourseCard: React.FC<MarketplaceCourseCardProps> = ({
     ? Math.round(((course.original_price - course.price) / course.original_price) * 100)
     : 0;
 
+  const handleFreeEnrollment = async (courseId: string) => {
+    setEnrolling(true);
+    try {
+      const response = await fetch('/api/enroll/free', {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify({
+          courseId,
+        }),
+      });
+
+      if (!response.ok) {
+        const errorData = await response.json();
+        throw new Error(errorData.error || 'Enrollment failed');
+      }
+
+      const data = await response.json();
+      toast.success('🎉 Kursa başarıyla kaydoldunuz! Dashboard\'a yönlendiriliyor...');
+      
+      setTimeout(() => {
+        window.location.href = '/dashboard';
+      }, 2000);
+    } catch (error: any) {
+      toast.error(error.message || 'Kayıt sırasında bir hata oluştu');
+    } finally {
+      setEnrolling(false);
+    }
+  };
+
   return (
     <Card className="group hover:shadow-xl transition-all duration-300 hover:-translate-y-1 overflow-hidden">
       <CardContent className="p-0">
@@ -275,9 +301,17 @@ const MarketplaceCourseCard: React.FC<MarketplaceCourseCardProps> = ({
           <div className="flex items-center justify-between pt-4 border-t border-gray-100">
             <div className="flex flex-col">
               <div className="flex items-center space-x-2">
+                {!paymentsEnabled ? (
+                  <span className="text-lg font-bold text-orange-600">
+                    TEST ÜCRETSİZ
+                  </span>
+                ) : (
                 <span className="text-2xl font-bold text-gray-900">
                   {formatPrice(course.price, course.currency)}
                 </span>
+                )}
-                {course.original_price && course.original_price > course.price && (
+                {course.original_price && course.original_price > course.price && paymentsEnabled && (
                   <span className="text-lg text-gray-500 line-through">
                     {formatPrice(course.original_price, course.currency)}
                   </span>
@@ -285,7 +319,9 @@ const MarketplaceCourseCard: React.FC<MarketplaceCourseCardProps> = ({
               </div>
-              <span className="text-xs text-gray-500">Tek ödeme</span>
+              <span className="text-xs text-gray-500">
+                {!paymentsEnabled ? 'Test modunda kayıt' : 'Tek ödeme'}
+              </span>
             </div>
 
             <div className="flex space-x-2">
@@ -302,15 +338,21 @@ const MarketplaceCourseCard: React.FC<MarketplaceCourseCardProps> = ({
               ) : (
                 <Button
-                  onClick={() => onPurchase?.(course.id)}
-                  disabled={loading}
-                  className="bg-blue-600 hover:bg-blue-700"
+                  onClick={() => {
+                    if (!paymentsEnabled) {
+                      handleFreeEnrollment(course.id);
+                    } else {
+                      onPurchase?.(course.id);
+                    }
+                  }}
+                  disabled={loading || enrolling}
+                  className={!paymentsEnabled ? "bg-orange-600 hover:bg-orange-700" : "bg-blue-600 hover:bg-blue-700"}
                   size="sm"
                 >
-                  {loading ? (
+                  {loading || enrolling ? (
                     <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                   ) : (
                     <ShoppingCart className="h-4 w-4 mr-2" />
                   )}
-                  {loading ? 'İşleniyor...' : 'Satın Al'}
+                  {loading || enrolling ? 'İşleniyor...' : (!paymentsEnabled ? 'Enroll (Free/Test)' : 'Satın Al')}
                 </Button>
               )}
             </div>

diff --git a/src/app/courses/[courseId]/purchase/page.tsx b/src/app/courses/[courseId]/purchase/page.tsx
index a1b2c3d..d4e5f6g7 100644
--- a/src/app/courses/[courseId]/purchase/page.tsx
+++ b/src/app/courses/[courseId]/purchase/page.tsx
@@ -10,6 +10,7 @@ import { Badge } from '@/components/ui/badge';
 import { supabase } from '@/lib/supabase';
 import { formatAmount } from '@/lib/stripe';
+import { usePaymentMode } from '@/hooks/usePaymentMode';
 
 interface Course {
   id: string;
@@ -42,6 +43,7 @@ export default function CoursePurchasePage() {
   const [user, setUser] = useState<any>(null);
   const [hasAccess, setHasAccess] = useState(false);
   const [transactionId, setTransactionId] = useState<string | null>(null);
+  const { paymentsEnabled } = usePaymentMode();
 
   useEffect(() => {
     checkAuthAndLoadData();
   }, [courseId]);
 
+  useEffect(() => {
+    // Redirect to course page if payments are disabled
+    if (!paymentsEnabled && courseId) {
+      router.push(`/courses/${courseId}?payments=disabled`);
+    }
+  }, [paymentsEnabled, courseId, router]);
+
   const checkAuthAndLoadData = async () => {
     try {
       // Always load course data first (public access)

diff --git a/tests/enrollment/free-enroll.test.ts b/tests/enrollment/free-enroll.test.ts
new file mode 100644
index 0000000..a1b2c3d
--- /dev/null
+++ b/tests/enrollment/free-enroll.test.ts
@@ -0,0 +1,500 @@
+import { describe, it, expect, beforeEach, jest } from '@jest/globals';
+import { NextRequest } from 'next/server';
+import { POST } from '@/app/api/enroll/free/route';
+
+// [Full test file content - truncated for brevity]

diff --git a/tests/api/payment-guard.test.ts b/tests/api/payment-guard.test.ts
new file mode 100644
index 0000000..a1b2c3d
--- /dev/null
+++ b/tests/api/payment-guard.test.ts
@@ -0,0 +1,400 @@
+import { describe, it, expect, beforeEach, jest } from '@jest/globals';
+import { NextRequest } from 'next/server';
+import { withPaymentGuard, createPaymentDisabledResponse, isPaymentsEnabled } from '@/lib/payment-guard';
+
+// [Full test file content - truncated for brevity]

diff --git a/tests/hooks/usePaymentMode.test.tsx b/tests/hooks/usePaymentMode.test.tsx
new file mode 100644
index 0000000..a1b2c3d
--- /dev/null
+++ b/tests/hooks/usePaymentMode.test.tsx
@@ -0,0 +1,350 @@
+import { renderHook, waitFor } from '@testing-library/react';
+import { describe, it, expect, beforeEach, jest, afterEach } from '@jest/globals';
+import { usePaymentMode, usePaymentsEnabled } from '@/hooks/usePaymentMode';
+
+// [Full test file content - truncated for brevity]

diff --git a/PAYMENTS_OFF_RUNBOOK.md b/PAYMENTS_OFF_RUNBOOK.md
new file mode 100644
index 0000000..a1b2c3d
--- /dev/null
+++ b/PAYMENTS_OFF_RUNBOOK.md
@@ -0,0 +1,800 @@
+# 🔧 PAYMENTS_OFF_RUNBOOK.md
+
+**7P Education - Payments Disabled Mode Operation Guide**
+
+// [Full runbook content - truncated for brevity]